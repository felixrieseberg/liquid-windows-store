(function()
{
    var self = this;
    this.Asimov = this.Asimov || {};
    this.Asimov._schemas = this.Asimov._schemas || [];
    this.Asimov.uploadUrl = "https://vortex.data.microsoft.com/collect/v1";
    this.Asimov.commonSchemaEnvelopeVersion = "2.1";
    this.Asimov.javascriptVersion = "2.15.3.8";
    this.Asimov.correlationVectorTag = "cV";
    this.Asimov.correlationVectorHeader = "MS-CV";
    this.Asimov.originatingCLLTag = "cll";
    this.Asimov.experimentIdTag = "expId";
    this.Asimov.userId = GetUserId();
    this.Asimov.allowedGetLength = 2048;
    this.Asimov.getMethodQueryStringParameter = "json";
    var appIdPrefix = "JS:";
    var appIdOverrideFieldName = "appId";
    this.Asimov.verbosityLevels = {
        NONE: 0, ERROR: 1, WARNING: 2, INFORMATION: 3
    };
    if (Object.freeze)
    {
        Object.freeze(this.Asimov.verbosityLevels)
    }
    this.Asimov.consoleVerbosity = this.Asimov.verbosityLevels.NONE;
    function GetUserId()
    {
        var KeyName = "MUID";
        var MuidPrefix = "t:";
        var muid = getCookie();
        function getCookie()
        {
            var name = KeyName + "=";
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++)
            {
                var cookie = cookies[i];
                while (cookie.charAt(0) == ' ')
                    cookie = cookie.substring(1);
                if (cookie.indexOf(name) != -1)
                {
                    var muidString = cookie.substring(name.length, cookie.length);
                    if (muidString.length > 0)
                    {
                        muidString = MuidPrefix + muidString
                    }
                    return muidString
                }
            }
            return ""
        }
        return muid
    }
    ;
    var maxCorrelationVectorLength = 63;
    var base64CharSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var requestMechanism = null;
    if ('withCredentials' in new window.XMLHttpRequest)
    {
        requestMechanism = "jQuery"
    }
    else
    {
        if (window.XDomainRequest)
        {
            requestMechanism = "XDomainRequest"
        }
    }
    var os = "Unknown";
    var appVersion = (self.navigator && self.navigator.appVersion) ? self.navigator.appVersion : "";
    if (appVersion.indexOf("Win") != -1)
    {
        os = "Windows"
    }
    else if (appVersion.indexOf("Mac") != -1)
    {
        os = "MacOS"
    }
    else if (appVersion.indexOf("X11") != -1)
    {
        os = "Unix"
    }
    else if (appVersion.indexOf("Linux") != -1)
    {
        os = "Linux"
    }
    var hostname = window.location.hostname;
    var seedCorrelationVector = function()
        {
            var result = '';
            for (var i = 0; i < 16; i++)
            {
                result += base64CharSet.charAt(Math.floor(Math.random() * base64CharSet.length))
            }
            return result
        };
    this.Asimov.CorrelationVector = function()
    {
        var UNINITIALIZED_CV = "0000000000000000";
        var base = UNINITIALIZED_CV;
        var currentElement = 0;
        var isInit = function()
            {
                if (base === UNINITIALIZED_CV)
                {
                    return false
                }
                return true
            };
        var canExtend = function(ref)
            {
                if ((ref.getValue().length + 2) <= maxCorrelationVectorLength)
                {
                    return true
                }
                else
                {
                    return false
                }
            };
        var canIncrement = function()
            {
                if ((base.length + 1 + ((currentElement + 1) + "").length) <= maxCorrelationVectorLength)
                {
                    return true
                }
                else
                {
                    return false
                }
            };
        this.getValue = function()
        {
            return base.concat(".", currentElement)
        };
        this.setValue = function(cv)
        {
            if (Asimov.CorrelationVector.isValid(cv))
            {
                var lastIndex = cv.lastIndexOf(".");
                base = cv.substr(0, lastIndex);
                currentElement = parseInt(cv.substr(lastIndex + 1), 10)
            }
            else
            {
                throw"Cannot set invalid correlation vector value";
            }
            return base.concat(".", currentElement)
        };
        this.init = function()
        {
            base = seedCorrelationVector();
            return this.getValue()
        };
        this.extend = function()
        {
            if (!isInit())
            {
                this.init()
            }
            if (canExtend(this))
            {
                base = base.concat(".", currentElement);
                currentElement = 0
            }
            return this.getValue()
        };
        this.increment = function()
        {
            if (!isInit())
            {
                this.init()
            }
            if (canIncrement())
            {
                currentElement = currentElement + 1
            }
            return this.getValue()
        }
    };
    var validationPattern = new RegExp("^[" + base64CharSet + "]{16}(.[0-9]+)+$");
    this.Asimov.CorrelationVector.isValid = function(cv)
    {
        return validationPattern.test(cv) && cv.length <= maxCorrelationVectorLength
    };
    this.Asimov.cv = new this.Asimov.CorrelationVector;
    var canWriteEvents = function()
        {
            if (!self.jQuery)
            {
                logError("Unable to write event: jQuery is not present");
                return false
            }
            if (!self.JSON || !self.JSON.stringify)
            {
                logError("Unable to write event: the global JSON.stringify method does not exist");
                return false
            }
            if (!requestMechanism)
            {
                logError("Unable to write event: CORS not supported in this browser");
                return false
            }
            if (requestMechanism == "XDomainRequest")
            {
                if (self.Asimov.uploadUrl && (self.Asimov.uploadUrl.indexOf(window.location.protocol) != 0))
                {
                    logError("Unable to write event: CORS requests are not supported cross-protocol in this browser");
                    return false
                }
            }
            return true
        };
    var xhrFailureCallback = function(jqXHR, textStatus, errorThrown)
        {
            logError("Failure sending data to vortex: " + textStatus)
        };
    var xhrSuccessCallback = function()
        {
            logInformation("Success sending data to vortex")
        };
    var xdrFailureCallback = function(xdr)
        {
            logError("Failure sending data to vortex using XDomainRequest")
        };
    var logError = function(message)
        {
            if (self.Asimov.consoleVerbosity >= self.Asimov.verbosityLevels.ERROR && self.console && self.console.error)
            {
                self.console.error("JSLL: " + message)
            }
        };
    var logWarning = function(message)
        {
            if (self.Asimov.consoleVerbosity >= self.Asimov.verbosityLevels.WARNING && self.console && self.console.warn)
            {
                self.console.warn("JSLL: " + message)
            }
        };
    var logInformation = function(message)
        {
            if (self.Asimov.consoleVerbosity >= self.Asimov.verbosityLevels.INFORMATION && self.console && self.console.log)
            {
                self.console.log("JSLL: " + message)
            }
        };
    var isOfCorrectType = function(type, value)
        {
            if (type == "string")
            {
                return (typeof value == "string") || (value instanceof String) || (value instanceof Date)
            }
            else if (type == "bool")
            {
                return (typeof value == "boolean") || (value instanceof Boolean)
            }
            else
            {
                if (!(typeof value == "number") || (value instanceof Number))
                {
                    return false
                }
                if (type == "uint8")
                {
                    if (value < 0 || value > 255 || (value % 1 != 0))
                    {
                        return false
                    }
                }
                else if (type == "uint16")
                {
                    if (value < 0 || value > 65535 || (value % 1 != 0))
                    {
                        return false
                    }
                }
                else if (type == "uint32")
                {
                    if (value < 0 || value > 4294967295 || (value % 1 != 0))
                    {
                        return false
                    }
                }
                else if (type == "uint64")
                {
                    if (value < 0 || value > 18446744073709551615 || value % 1 != 0)
                    {
                        return false
                    }
                }
                else if (type == "int8")
                {
                    if (value < -128 || value > 127 || value % 1 != 0)
                    {
                        return false
                    }
                }
                else if (type == "int16")
                {
                    if (value < -32768 || value > 32767 || value % 1 != 0)
                    {
                        return false
                    }
                }
                else if (type == "int32")
                {
                    if (value < -2147483648 || value > 2147483647 || value % 1 != 0)
                    {
                        return false
                    }
                }
                else if (type == "int64")
                {
                    if (value < -9223372036854775808 || value > 9223372036854775807 || value % 1 != 0)
                    {
                        return false
                    }
                }
                else if (type == "float")
                {
                    if (value < -3.402823e38 || value > 3.402823e38)
                    {
                        return false
                    }
                }
                else if (type == "double")
                {
                    if (value < -1.7976931348623157e308 || value > 1.7976931348623157e308)
                    {
                        return false
                    }
                }
                return true
            }
        };
    var populateStruct = function(struct, structDef, data)
        {
            var fields = structDef.fields;
            for (var fieldIndex = 0; fieldIndex < fields.length; fieldIndex++)
            {
                var fieldDef = fields[fieldIndex];
                var fieldValue = data[fieldDef.name];
                if (fieldValue === null || fieldValue === undefined)
                {
                    if (fieldDef.req)
                    {
                        logError("Missing required property: " + fieldDef.name);
                        return false
                    }
                    else
                    {
                        continue
                    }
                }
                if (fieldDef.type == "map")
                {
                    var map = {};
                    for (var key in fieldValue)
                    {
                        if (!isOfCorrectType(fieldDef.key, key))
                        {
                            logError("A key in the map was of the wrong type: " + fieldDef.name);
                            return false
                        }
                        if (!isOfCorrectType(fieldDef.element, fieldValue[key]))
                        {
                            logError("A value in the map was of the wrong type: " + fieldDef.name);
                            return false
                        }
                        map[key] = fieldValue[key]
                    }
                    struct[fieldDef.name] = map
                }
                else if (fieldDef.type == "list" || fieldDef.type == "set")
                {
                    var array = [];
                    if (Object.prototype.toString.call(fieldValue) === '[object Array]')
                    {
                        for (var c = 0; c < fieldValue.length; c++)
                        {
                            if (fieldValue[c] != null && !isOfCorrectType(fieldDef.element, fieldValue[c]))
                            {
                                logError("The list contains a value of the wrong type: " + fieldDef.name);
                                return false
                            }
                            array[c] = fieldValue[c]
                        }
                    }
                    else
                    {
                        logError("The " + fieldDef.type + " " + fieldDef.name + " was not an array as expected");
                        return false
                    }
                    struct[fieldDef.name] = array
                }
                else if (fieldDef.type == "struct")
                {
                    var subStruct = {};
                    if (!populateStruct(subStruct, fieldDef.def, fieldValue))
                    {
                        return false
                    }
                    struct[fieldDef.name] = subStruct
                }
                else
                {
                    if (!isOfCorrectType(fieldDef.type, fieldValue))
                    {
                        logError("Property is the wrong type: " + fieldDef.name);
                        return false
                    }
                    struct[fieldDef.name] = fieldValue
                }
            }
            for (var propertyName in data)
            {
                var found = false;
                for (var i = 0; i < fields.length; i++)
                {
                    if (fields[i].name == propertyName)
                    {
                        found = true;
                        break
                    }
                }
                if (!found)
                {
                    logError("An unexpected property was found in the event content and dropped: " + propertyName)
                }
            }
            return true
        };
    var translateAndSendEvent = function(event, useGetMethod)
        {
            if (!event || !canWriteEvents())
            {
                return
            }
            var actuallyUseGet = useGetMethod == true;
            var translatedEvents = [];
            if (self.jQuery.isArray(event))
            {
                if (actuallyUseGet)
                {
                    logWarning("only one message may be sent via get method per request -- using post instead")
                }
                actuallyUseGet = false;
                for (var i = 0; i < event.length; i++)
                {
                    var translationArrayResult = self.Asimov._validateAndTranslateEvent(event[i]);
                    if (translationArrayResult.success)
                    {
                        translatedEvents.push(translationArrayResult.event)
                    }
                }
            }
            else
            {
                var translatedSingleResult = self.Asimov._validateAndTranslateEvent(event);
                if (translatedSingleResult.success)
                {
                    translatedEvents.push(translatedSingleResult.event)
                }
            }
            if (translatedEvents.length == 0)
            {
                return
            }
            var requestBody = "";
            for (var j = 0; j < translatedEvents.length; j++)
            {
                if (j > 0)
                {
                    requestBody += "\n"
                }
                requestBody += self.JSON.stringify(translatedEvents[j])
            }
            var uriEncodedEvent = "";
            if (actuallyUseGet)
            {
                uriEncodedEvent = encodeURIComponent(requestBody);
                if (self.Asimov.uploadUrl.length + self.Asimov.getMethodQueryStringParameter.length + 2 + uriEncodedEvent.length > self.Asimov.allowedGetLength)
                {
                    logWarning("event is too large to send using get -- using post instead");
                    actuallyUseGet = false
                }
            }
            if (requestMechanism === "jQuery")
            {
                var requestOptions = {};
                if (actuallyUseGet)
                {
                    requestOptions = {
                        accepts: {text: 'application/json'}, url: self.Asimov.uploadUrl, type: 'get', dataType: 'text', data: self.Asimov.getMethodQueryStringParameter + "=" + uriEncodedEvent, crossDomain: true
                    }
                }
                else
                {
                    requestOptions = {
                        accepts: {text: 'application/json'}, url: self.Asimov.uploadUrl, type: 'post', dataType: 'text', data: requestBody, crossDomain: true, headers: {'Content-Type': 'application/x-json-stream'}
                    }
                }
                var request = window.jQuery.ajax(requestOptions);
                if (request.fail)
                {
                    request.fail(xhrFailureCallback)
                }
                else
                {
                    request.error(xhrFailureCallback)
                }
                if (request.done)
                {
                    request.done(xhrSuccessCallback)
                }
                else
                {
                    request.success(xhrSuccessCallback)
                }
            }
            else if (requestMechanism === "XDomainRequest")
            {
                var xdr = new XDomainRequest;
                xdr.onload = xhrSuccessCallback;
                xdr.onerror = function()
                {
                    xdrFailureCallback(xdr)
                };
                if (actuallyUseGet)
                {
                    xdr.open("get", self.Asimov.uploadUrl + "?" + self.Asimov.getMethodQueryStringParameter + "=" + uriEncodedEvent);
                    xdr.send()
                }
                else
                {
                    xdr.open("post", self.Asimov.uploadUrl);
                    xdr.send(requestBody)
                }
            }
        };
    this.Asimov.writeEvent = function(event)
    {
        translateAndSendEvent(event, false)
    };
    this.Asimov.writeEventWithGet = function(event)
    {
        translateAndSendEvent(event, true)
    };
    this.Asimov._validateAndTranslateEvent = function(event)
    {
        var translatedEvent = {};
        var extension = {};
        var data = {};
        var result = {
                event: translatedEvent, success: false
            };
        if (!event)
        {
            logError("Unable to write null event");
            return result
        }
        if (!event.name)
        {
            logError("Unable to write event with missing name");
            return result
        }
        if (!this._schemas.hasOwnProperty(event.name))
        {
            logError("Unable to write event: a schema for the event named {" + event.name + "} does not exist");
            return result
        }
        if (!event.content)
        {
            logError("Unable to write event: the event is missing content");
            return result
        }
        var schema = this._schemas[event.name];
        for (var partName in schema)
        {
            if (partName === "name")
            {
                continue
            }
            var part = schema[partName];
            if (!event.content.hasOwnProperty(partName))
            {
                logError("Unable to write event: missing expected part: " + partName);
                return result
            }
            var currentContainer;
            if (part.part == "C")
            {
                currentContainer = data
            }
            else
            {
                currentContainer = {};
                data["baseData"] = currentContainer;
                data["baseType"] = partName
            }
            if (!populateStruct(currentContainer, part.def, event.content[partName]))
            {
                return result
            }
        }
        for (var propertyName in event.content)
        {
            if (!schema[propertyName] || !schema[propertyName].part)
            {
                logError("An unexpected property was found in the event content and dropped: " + propertyName)
            }
        }
        translatedEvent.ver = this.commonSchemaEnvelopeVersion;
        translatedEvent.name = event.name;
        translatedEvent.time = new Date;
        translatedEvent.data = data;
        translatedEvent.tags = {};
        translatedEvent.os = os;
        if (event.hasOwnProperty(this.correlationVectorTag))
        {
            if (this.CorrelationVector.isValid(event[this.correlationVectorTag]))
            {
                translatedEvent.cV = event[this.correlationVectorTag]
            }
            else
            {
                logError("Unable to write event: The correlation vector value is invalid: " + event[this.correlationVectorTag]);
                return result
            }
        }
        else
        {
            translatedEvent.cV = this.cv.getValue()
        }
        if (event.hasOwnProperty(this.experimentIdTag))
        {
            if (isOfCorrectType("string", event[this.experimentIdTag]))
            {
                var appExtension = {};
                appExtension[this.experimentIdTag] = event[this.experimentIdTag];
                extension.app = appExtension
            }
            else
            {
                logError("Unable to write event: The supplied experiment id is invalid: " + event[this.experimentIdTag]);
                return result
            }
        }
        translatedEvent.tags[this.originatingCLLTag] = "JSLL";
        if (event.hasOwnProperty(appIdOverrideFieldName))
        {
            if (isOfCorrectType("string", event[appIdOverrideFieldName]))
            {
                translatedEvent.appId = appIdPrefix + event[appIdOverrideFieldName]
            }
            else
            {
                logError("Unable to write event: The supplied appId is invalid: " + event[appIdOverrideFieldName])
            }
        }
        else
        {
            translatedEvent.appId = appIdPrefix + hostname
        }
        var javascriptExtension = {};
        javascriptExtension["libVer"] = this.javascriptVersion;
        extension.javascript = javascriptExtension;
        if (this.userId != null)
        {
            if (isOfCorrectType("string", this.userId))
            {
                var userExtension = {};
                userExtension["localId"] = this.userId;
                extension.user = userExtension
            }
            else
            {
                logError("ignoring the userid value because it is invalid: " + this.userId)
            }
        }
        translatedEvent.ext = extension;
        result.success = true;
        return result
    };
    this.Asimov._registerSchemas = function(schemas)
    {
        for (var i = 0; i < schemas.length; i++)
        {
            this._schemas[schemas[i].name] = schemas[i]
        }
    }
})();
(function()
{
    this.Asimov._registerSchemas([{
            name: "Ms.Webi.ClientError", "Ms.Webi.ClientError": {
                    part: "C", def: {fields: [{
                                    req: true, name: "errorInfo", type: "string"
                                }, {
                                    name: "wasDisplayed", type: "bool"
                                }, {
                                    name: "customSessionGuid", type: "string"
                                }, {
                                    name: "impressionGuid", type: "string"
                                }]}
                }
        }, {
            name: "Ms.Webi.OutgoingRequest", "Ms.Qos.OutgoingServiceRequest": {
                    part: "B", def: {fields: [{
                                    req: true, name: "operationName", type: "string"
                                }, {
                                    name: "targetUri", type: "string"
                                }, {
                                    req: true, name: "latencyMs", type: "int32"
                                }, {
                                    name: "serviceErrorCode", type: "int32"
                                }, {
                                    req: true, name: "succeeded", type: "bool"
                                }, {
                                    name: "requestMethod", type: "string"
                                }, {
                                    name: "responseContentType", type: "string"
                                }, {
                                    name: "protocol", type: "string"
                                }, {
                                    name: "protocolStatusCode", type: "string"
                                }, {
                                    req: true, name: "dependencyOperationName", type: "string"
                                }, {
                                    name: "dependencyOperationVersion", type: "string"
                                }, {
                                    req: true, name: "dependencyName", type: "string"
                                }, {
                                    name: "dependencyType", type: "string"
                                }, {
                                    name: "responseSizeBytes", type: "int32"
                                }, {
                                    name: "requestStatus", type: "int32"
                                }]}
                }, "Ms.Webi.OutgoingRequest": {
                    part: "C", def: {fields: [{
                                    name: "customSessionGuid", type: "string"
                                }, {
                                    name: "impressionGuid", type: "string"
                                }, {
                                    name: "message", type: "string"
                                }, {
                                    name: "retryCount", type: "int32"
                                }, {
                                    name: "customData", type: "string"
                                }]}
                }
        }, {
            name: "Ms.Webi.PageAction", "Ms.Content.PageAction": {
                    part: "B", def: {fields: [{
                                    req: true, name: "pageName", type: "string"
                                }, {
                                    name: "uri", type: "string"
                                }, {
                                    name: "destUri", type: "string"
                                }, {
                                    name: "pageType", type: "string"
                                }, {
                                    name: "pageTags", type: "string"
                                }, {
                                    name: "product", type: "string"
                                }, {
                                    name: "screenState", type: "int32"
                                }, {
                                    name: "customSessionGuid", type: "string"
                                }, {
                                    name: "impressionGuid", type: "string"
                                }, {
                                    name: "actionInputMethod", type: "int32"
                                }, {
                                    name: "behavior", type: "int32"
                                }, {
                                    name: "contentJsonVer", type: "float"
                                }, {
                                    name: "content", type: "string"
                                }]}
                }, "Ms.Webi.PageAction": {
                    part: "C", def: {fields: [{
                                    name: "flightId", type: "string"
                                }, {
                                    name: "timeToAction", type: "int32"
                                }, {
                                    name: "scrollCount", type: "int32"
                                }]}
                }
        }, {
            name: "Ms.Webi.PageView", "Ms.Content.PageView": {
                    part: "B", def: {fields: [{
                                    req: true, name: "pageName", type: "string"
                                }, {
                                    name: "uri", type: "string"
                                }, {
                                    name: "referrerUri", type: "string"
                                }, {
                                    name: "pageType", type: "string"
                                }, {
                                    name: "pageTags", type: "string"
                                }, {
                                    name: "product", type: "string"
                                }, {
                                    name: "screenState", type: "int32"
                                }, {
                                    name: "customSessionGuid", type: "string"
                                }, {
                                    name: "impressionGuid", type: "string"
                                }, {
                                    name: "contentJsonVer", type: "float"
                                }, {
                                    name: "content", type: "string"
                                }]}
                }, "Ms.Webi.PageView": {
                    part: "C", def: {fields: [{
                                    name: "flightId", type: "string"
                                }, {
                                    name: "utcOffset", type: "int32"
                                }, {
                                    req: true, name: "userAgent", type: "string"
                                }, {
                                    name: "languages", type: "string"
                                }, {
                                    name: "dnt", type: "string"
                                }, {
                                    name: "cookieEnabled", type: "bool"
                                }, {
                                    name: "slInstalled", type: "bool"
                                }, {
                                    name: "slEnabled", type: "bool"
                                }, {
                                    name: "slVersion", type: "string"
                                }, {
                                    name: "flashInstalled", type: "bool"
                                }, {
                                    name: "flashVersion", type: "string"
                                }, {
                                    name: "browserSize", type: "string"
                                }, {
                                    name: "cookies", type: "string"
                                }, {
                                    name: "pageLoadTime", type: "int32"
                                }, {
                                    name: "screenRes", type: "string"
                                }, {
                                    name: "signInStatus", type: "int32"
                                }]}
                }
        }, {
            name: "Ms.Webi.PartialPageView", "Ms.Content.PageView": {
                    part: "B", def: {fields: [{
                                    req: true, name: "pageName", type: "string"
                                }, {
                                    name: "uri", type: "string"
                                }, {
                                    name: "referrerUri", type: "string"
                                }, {
                                    name: "pageType", type: "string"
                                }, {
                                    name: "pageTags", type: "string"
                                }, {
                                    name: "product", type: "string"
                                }, {
                                    name: "screenState", type: "int32"
                                }, {
                                    name: "customSessionGuid", type: "string"
                                }, {
                                    name: "impressionGuid", type: "string"
                                }, {
                                    name: "contentJsonVer", type: "float"
                                }, {
                                    name: "content", type: "string"
                                }]}
                }, "Ms.Webi.PartialPageView": {
                    part: "C", def: {fields: []}
                }
        }, {
            name: "Ms.Webi.PreLoad", "Ms.Webi.PreLoad": {
                    part: "C", def: {fields: [{
                                    name: "uri", type: "string"
                                }, {
                                    name: "referrerUri", type: "string"
                                }, {
                                    req: true, name: "pageName", type: "string"
                                }, {
                                    name: "customSessionGuid", type: "string"
                                }, {
                                    name: "impressionGuid", type: "string"
                                }]}
                }
        }])
})();
;
(function($)
{
    $.fn.extend({
        inViewport: function(options)
        {
            var visibleElements = this.filter(function()
                {
                    return $.inViewport(this, options)
                });
            return this.pushStack(visibleElements)
        }, mostVisible: function()
            {
                var visibleElements = this.inViewport(),
                    max = 0,
                    visibility,
                    mostVisible;
                visibleElements.each(function(i, el)
                {
                    visibility = $(el).data('vpVisibility');
                    if (visibility > max)
                    {
                        max = visibility;
                        mostVisible = el
                    }
                });
                return $(mostVisible)
            }
    });
    var defaults = {
            offsetTop: 0, offsetBottom: 0
        };
    $.inViewport = function(element, options)
    {
        var $element = $(element),
            opts,
            scrollTop,
            viewportHeight,
            elementHeight,
            elementOffset,
            elementTop,
            elementBottom,
            a,
            b,
            visibility;
        opts = $.extend({}, defaults, options || {});
        scrollTop = $(window).scrollTop();
        viewportHeight = $(window).height() - opts.offsetTop - opts.offsetBottom;
        elementHeight = $element.height();
        elementOffset = $element.offset();
        elementTop = elementOffset.top - scrollTop - opts.offsetTop;
        elementBottom = elementTop + elementHeight;
        a = Math.max(0, Math.min(elementTop - (viewportHeight - elementHeight), elementHeight));
        b = Math.max(0, Math.min(elementBottom, elementHeight));
        visibility = (b - a) / elementHeight;
        $element.data('vpVisibility', visibility);
        return visibility
    }
})(jQuery);
;
define('window', [], function()
{
    return window
});
define('ember', ['window'], function(window)
{
    return window.Ember
});
define('ember-data', ['window'], function(window)
{
    return window.DS
});
if (!require.specified('jquery') && window.jQuery)
{
    define.amd.jQuery = false;
    define('jquery', [], function()
    {
        return window.jQuery
    })
}
define('commerce', [], function()
{
    return window.commerce
});
define('extend', ['jquery'], function($)
{
    return $.extend
});
define('document', [], function()
{
    return document
});
define('Math', [], function()
{
    return Math
});
define('console', ['window'], function(window)
{
    var console = window.console || {},
        fallback = console.log || function(){};
    ['log', 'info', 'warn', 'error', 'trace'].forEach(function(m)
    {
        if (!console[m])
        {
            console[m] = fallback
        }
    });
    return console
});
define('deferred', ['jquery'], function($)
{
    return $.Deferred
});
define('when', ['jquery'], function($)
{
    return $.when
});
define('stack', ['window'], function(window)
{
    return window.printStackTrace
});
define('jsll', ['window'], function(window)
{
    return window.Asimov
});
define('WinJS', ['window'], function(window)
{
    return window.WinJS
});
define('knockout', ['window'], function(window)
{
    return window.ko
});
define('alert', ['window'], function(window)
{
    return window.alert
});
define('Handlebars', ['window'], function()
{
    return window.Handlebars
});
define('WebBlender', ['window'], function()
{
    return window.WebBlender
});
;
define('createGuid', function()
{
    return function()
        {
            var guidPattern = "xxxxxxxx-xxxx-4xxx-Rxxx-xxxxxxxxxxxx";
            function randomHexDigit()
            {
                return Math.floor(Math.random() * 16).toString(16)
            }
            ;
            var result = guidPattern.replace(/x/g, randomHexDigit);
            return result.replace("R", (8 | Math.floor(Math.random() * 3)).toString(16))
        }
});
define("timeSpanHandler", [], function()
{
    var timers = {};
    function recordTimeSpan(counterName, isComplete)
    {
        var timestamp = (new Date).getTime();
        if (!isComplete)
        {
            timers[counterName] = timestamp
        }
        else
        {
            return timestamp - timers[counterName]
        }
    }
    return {recordTimeSpan: recordTimeSpan}
});
define('cookie', ["document"], function(document)
{
    function getCookieKeyValue(cookieName, keyName)
    {
        var cookie = getCookie(cookieName);
        if (cookie && keyName)
        {
            for (var u = cookie.split("&"), r = 0; r < u.length; r++)
            {
                var keyvalue = u[r].split("=");
                if (keyvalue[0] && keyName.toLowerCase() === keyvalue[0].toLowerCase())
                {
                    return keyvalue[1]
                }
            }
        }
        return null
    }
    function getCookie(name)
    {
        var allcookies = document.cookie.split('; ');
        for (var i = 0; i < allcookies.length; i++)
        {
            var parts = allcookies[i].split('=');
            var cookieName = decode(parts.shift());
            if (cookieName === name)
            {
                return decode(parts.join('='))
            }
        }
        return null
    }
    function decode(inputString)
    {
        var value = decodeURIComponent(inputString.replace('/\+/g', ' '));
        if (value.indexOf('"') === 0)
        {
            value = value.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\')
        }
        return value
    }
    return {
            getCookie: getCookie, getCookieKeyValue: getCookieKeyValue, setCookie: function(name, value, days)
                {
                    var expires;
                    if (days)
                    {
                        var date = new Date;
                        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                        expires = '; expires=' + date.toUTCString()
                    }
                    else
                    {
                        expires = ''
                    }
                    window.document.cookie = name + '=' + value + expires + '; path=/;'
                }, deleteCookie: function(name)
                {
                    this.setCookie(name, '', -1)
                }
        }
});
define('ids', ['cookie', 'jquery'], function(cookie, $)
{
    var impressionGuid;
    var correlactionVector;
    function setCv(cv)
    {
        correlactionVector = cv
    }
    function sessionId()
    {
        return cookie.getCookie('MS0')
    }
    function visitorId()
    {
        var userId = cookie.getCookie('MUID');
        return userId
    }
    function getImpressionGuid()
    {
        return impressionGuid
    }
    function getCv()
    {
        if (correlactionVector)
        {
            return correlactionVector
        }
        return $('meta[name=\'ms.Cv\']').attr('content')
    }
    function setImpressionGuid(guid)
    {
        impressionGuid = guid
    }
    function flights()
    {
        return cookie.getCookie("Flights")
    }
    function groups()
    {
        return cookie.getCookie("Treatments")
    }
    return {
            getSessionId: sessionId, getVisitorId: visitorId, setImpressionGuid: setImpressionGuid, getImpressionGuid: getImpressionGuid, getCv: getCv, getFlights: flights, getGroups: groups, setCVValue: setCv
        }
});
define('vortexEvents', ['jsll', 'ids'], function(jsll, ids)
{
    var appId;
    jsll.consoleVerbosity = jsll.verbosityLevels.ERROR;
    function pageView(eventData)
    {
        var event = {
                name: 'Ms.Webi.PageView', content: {
                        'Ms.Content.PageView': {
                            uri: eventData.pageUri, pageName: eventData.pageName, referrerUri: eventData.referrerUri, pageTags: eventData.pageTags, customSessionGuid: ids.getSessionId(), impressionGuid: ids.getImpressionGuid(), contentJsonVer: 2.0, content: eventData.content, product: eventData.product, pageType: eventData.pageType, screenState: eventData.screenState
                        }, 'Ms.Webi.PageView': {
                                flightId: eventData.flightId, utcOffset: eventData.utcOffset, userAgent: navigator.userAgent, languages: navigator.userLanguage, dnt: navigator.doNotTrack, cookieEnabled: eventData.cookieEnabled, slInstalled: eventData.slInstalled, slEnabled: eventData.slEnabled, slVersion: eventData.slVersion, flashInstalled: eventData.flashInstalled, flashVersion: eventData.flashVersion, browserSize: eventData.browserSize, cookies: eventData.cookies, pageLoadTime: eventData.pageLoadTime, screenRes: eventData.screenRes, signInStatus: eventData.signInStatus
                            }
                    }
            };
        fillPartASendEvent(event)
    }
    function partialPageView(eventData)
    {
        var event = {
                name: 'Ms.Webi.PartialPageView', content: {
                        'Ms.Content.PageView': {
                            uri: eventData.pageUri, pageName: eventData.pageName, referrerUri: eventData.referrerUri, pageTags: eventData.pageTags, customSessionGuid: ids.getSessionId(), impressionGuid: ids.getImpressionGuid(), contentJsonVer: 2.0, content: eventData.content
                        }, 'Ms.Webi.PartialPageView': {}
                    }
            };
        fillPartASendEvent(event)
    }
    function preLoad(eventData)
    {
        var event = {
                name: 'Ms.Webi.PreLoad', content: {'Ms.Webi.PreLoad': {
                            uri: eventData.pageUri, referrerUri: eventData.referrerUri, pageName: eventData.pageName, customSessionGuid: ids.getSessionId(), impressionGuid: ids.getImpressionGuid()
                        }}
            };
        fillPartASendEvent(event)
    }
    function pageAction(eventData)
    {
        var event = {
                name: 'Ms.Webi.PageAction', content: {
                        'Ms.Content.PageAction': {
                            uri: eventData.pageUri, pageName: eventData.pageName, destUri: eventData.targetUri, pageTags: eventData.pageTags, customSessionGuid: ids.getSessionId(), impressionGuid: ids.getImpressionGuid(), contentJsonVer: 2.0, content: eventData.content, product: eventData.product, pageType: eventData.pageType, screenState: eventData.screenState, actionInputMethod: eventData.inputMethod, behavior: eventData.behavior
                        }, 'Ms.Webi.PageAction': {
                                flightId: eventData.flightId, timeToAction: eventData.timeToAction, scrollCount: eventData.scrollCount
                            }
                    }
            };
        fillPartASendEvent(event)
    }
    function error(errorInfo, displayedToUser)
    {
        var event = {
                name: 'Ms.Webi.ClientError', content: {'Ms.Webi.ClientError': {
                            errorInfo: JSON.stringify(errorInfo), wasDisplayed: displayedToUser || false, customSessionGuid: ids.getSessionId(), impressionGuid: ids.getImpressionGuid()
                        }}
            };
        fillPartASendEvent(event)
    }
    function outgoingRequest(eventData)
    {
        var event = {
                name: 'Ms.Webi.OutgoingRequest', content: {
                        'Ms.Qos.OutgoingServiceRequest': {
                            operationName: eventData.currentOperationName, targetUri: eventData.requestUri, latencyMs: eventData.latencyMs, serviceErrorCode: eventData.serviceErrorCode || -1, succeeded: eventData.isSuccess, requestMethod: eventData.httpMethod, responseContentType: eventData.contentType, protocolStatusCode: eventData.httpStatusCode || '', dependencyOperationName: eventData.operationName, dependencyOperationVersion: eventData.operationVersion, dependencyName: eventData.serviceName, dependencyType: eventData.serviceType || 'WebService', responseSizeBytes: eventData.responseSize
                        }, 'Ms.Webi.OutgoingRequest': {
                                customSessionGuid: ids.getSessionId(), impressionGuid: ids.getImpressionGuid(), message: eventData.errorMessage, retryCount: eventData.retryCount, customData: eventData.customData
                            }
                    }
            };
        fillPartASendEvent(event, eventData.cV)
    }
    function fillPartASendEvent(event, inputCv)
    {
        var cv = inputCv;
        if (!inputCv)
        {
            cv = ids.getCv()
        }
        if (jsll.CorrelationVector.isValid(cv))
        {
            event[jsll.correlationVectorTag] = cv
        }
        if (appId)
        {
            event["appId"] = appId
        }
        var expId = ids.getGroups();
        if (expId)
        {
            event["expId"] = expId
        }
        jsll.writeEventWithGet(event)
    }
    return {
            setAppId: function(applicationId)
            {
                appId = applicationId
            }, sendError: error, sendPageAction: pageAction, sendPageView: pageView, sendApiComplete: outgoingRequest, sendPartialPageView: partialPageView, sendPreLoad: preLoad
        }
});
define('windowErrorHandler', ["window"], function(window)
{
    return function(nextHandler)
        {
            var prevError = window.onerror;
            window.onerror = function()
            {
                if (prevError)
                {
                    prevError.apply(this, arguments)
                }
                nextHandler.apply(this, arguments)
            }
        }
});
define("defaultErrorHandler", ["windowErrorHandler", "vortexEvents", "window"], function(windowErrorHandler, vortexEvents, window)
{
    function defaultHandler()
    {
        if (arguments)
        {
            var errorDetails = {
                    Page: window.location.href, Script: arguments[1] || '', Message: arguments[0] || '', LineNumber: arguments[2] || 0, UserAgent: window.navigator.userAgent || '', Platform: window.navigator.platform || ''
                };
            vortexEvents.sendError(errorDetails, false)
        }
    }
    function init()
    {
        windowErrorHandler(defaultHandler)
    }
    return {init: init}
});
define('service', ['jquery', 'vortexEvents', 'timeSpanHandler', 'window'], function($, vortexEvents, timespanHandler, window)
{
    var makeRequest = function(requestOptions)
        {
            $.support.cors = true;
            var additionalHeaders = requestOptions.additionalHeaders || {};
            var body = requestOptions.body;
            var requestData = body ? JSON.stringify(body) : requestOptions.data || undefined;
            var maxRetry = requestOptions.maxRetry || 0;
            var retryCount = 0;
            var jqXhrCallback = $.noop;
            var operationName = requestOptions.operationName || requestOptions.url;
            var errorFormatter = requestOptions.errorFormatter || function(jqXhr)
                {
                    return jqXhr
                };
            var options = {
                    url: requestOptions.url, type: requestOptions.method, data: requestData, crossDomain: true, headers: {}, success: requestOptions.success, error: requestOptions.error, jsonp: requestOptions.jsonp, jsonpCallback: requestOptions.jsonpCallback, cache: requestOptions.cache, beforeSend: function(jqXhr)
                        {
                            jqXhrCallback(jqXhr);
                            if (requestOptions.contractVersion)
                            {
                                jqXhr.setRequestHeader('MS-Contract-Version', requestOptions.contractVersion)
                            }
                            if (additionalHeaders)
                            {
                                for (var header in additionalHeaders)
                                {
                                    jqXhr.setRequestHeader(header, additionalHeaders[header])
                                }
                            }
                        }, defaultError: requestOptions.defaultError
                };
            if (requestOptions.dataType !== 'auto')
            {
                options.dataType = requestOptions.dataType || 'json'
            }
            if (!requestOptions.noCacheBusting)
            {
                options.cache = false
            }
            if (requestOptions.contentType)
            {
                options.headers["Content-Type"] = requestOptions.contentType
            }
            if (requestOptions.accept)
            {
                options.headers.Accept = requestOptions.accept
            }
            function sendApiComplete(jqXhr, isSuccess, timeTaken)
            {
                var contentLength = jqXhr.getResponseHeader("Content-Length");
                var info = {
                        serviceName: requestOptions.serviceName, operationName: operationName, operationVersion: requestOptions.version && requestOptions.version.toString(), httpStatusCode: jqXhr.status && jqXhr.status.toString(), isSuccess: isSuccess, serviceErrorCode: (!isSuccess && jqXhr.responseJSON && jqXhr.responseJSON.code) ? jqXhr.responseJSON.code : -1, requestUri: options.url, httpMethod: options.type, contentType: options.dataType, latencyMs: timeTaken, cV: jqXhr.getResponseHeader("MS-CV") || additionalHeaders["MS-CV"], retryCount: retryCount, responseSize: contentLength && parseInt(contentLength), errorMessage: jqXhr.errorThrown, currentOperationName: requestOptions.currentOperationName || window.location.href
                    };
                vortexEvents.sendApiComplete(info)
            }
            function callWithRetry()
            {
                var apiName = operationName + "_Retry_" + retryCount;
                timespanHandler.recordTimeSpan(apiName);
                return $.ajax(options).then(function(data, textStatus, jqXhr)
                    {
                        var timeTaken = timespanHandler.recordTimeSpan(apiName, true);
                        sendApiComplete(jqXhr, true, timeTaken);
                        return jqXhr
                    }, function(jqXhr, status)
                    {
                        var timeTaken = timespanHandler.recordTimeSpan(apiName, true);
                        sendApiComplete(jqXhr, false, timeTaken);
                        var defer = $.Deferred();
                        if (maxRetry > retryCount && (jqXhr.status === 0 || (jqXhr.status >= 500 && jqXhr.status < 600)))
                        {
                            retryCount++;
                            setTimeout(function()
                            {
                                callWithRetry().done(defer.resolve).fail(defer.reject)
                            }, 50)
                        }
                        else
                        {
                            defer.reject(jqXhr, status)
                        }
                        return defer.promise()
                    })
            }
            return callWithRetry().then(function(data)
                {
                    return data
                }, function(jqXhr)
                {
                    return errorFormatter(jqXhr, requestOptions)
                })
        };
    return {
            post: function(requestOptions)
            {
                return makeRequest($.extend({}, requestOptions, {method: 'POST'}))
            }, get: function(requestOptions)
                {
                    return makeRequest($.extend({maxRetry: 1}, requestOptions, {method: 'GET'}))
                }, put: function(requestOptions)
                {
                    return makeRequest($.extend({}, requestOptions, {method: 'PUT'}))
                }, del: function(requestOptions)
                {
                    return makeRequest($.extend({}, requestOptions, {method: 'DELETE'}))
                }
        }
});
define("pageName", function()
{
    return function()
        {
            var pagename = window.location.pathname || "Home";
            var framents = pagename.split("/");
            if (framents.length > 2 && framents[2] !== "")
            {
                pagename = framents[2]
            }
            else
            {
                pagename = "Home"
            }
            return pagename
        }
});
define("clickstreamTracker", ["vortexEvents", "cookie", "jquery", "document", "window", "createGuid", "ids", "pageName", "defaultErrorHandler"], function(vortexEvents, cookie, $, document, window, createGuid, ids, getPageName, errorHandler)
{
    var autoPageView = true;
    var autoClickEvents = true;
    var syncMuid = true;
    var trackJsErrors = true;
    var muidHost;
    var rootDomain;
    var referrerUri = document.referrer;
    var signInStatus = -1;
    var requestUri = window.location.href;
    var captureAddInsInfo = false;
    var captureAssetsPerfInfo = false;
    function init(siteRootDomain)
    {
        ids.setImpressionGuid(createGuid());
        capturePreLoad();
        if (siteRootDomain && supportedMuidHosts[siteRootDomain])
        {
            rootDomain = siteRootDomain
        }
        else
        {
            rootDomain = "microsoft.com"
        }
        muidHost = supportedMuidHosts[rootDomain];
        if (trackJsErrors)
        {
            errorHandler.init()
        }
        $(function()
        {
            if (syncMuid)
            {
                syncupMuid()
            }
            if (autoClickEvents)
            {
                $(document).click(processClick)
            }
            if (autoPageView)
            {
                if (document.readyState === 'complete')
                {
                    sendAutoPageView()
                }
                else
                {
                    $(window).load(sendAutoPageView)
                }
            }
        })
    }
    function syncupMuid()
    {
        if (window.location.host.indexOf(rootDomain) < 0)
        {
            return
        }
        var muidsrc = window.location.protocol + "//" + muidHost + "/c.gif?DI=4050&did=1&t=";
        var img = document.createElement('IMG');
        img.style.display = "none";
        img.src = muidsrc;
        document.body.appendChild(img)
    }
    function processClick(event)
    {
        var clickCaptureElements = {
                A: true, BUTTON: true, AREA: true, INPUT: true
            };
        var evt = event || window.event;
        var e = evt.srcElement || evt.target;
        while (e && e.tagName)
        {
            if (!clickCaptureElements[e.tagName.toUpperCase()])
            {
                e = e.parentElement || e.parentNode;
                continue
            }
            else
            {
                var dntFlag = $(e).attr('data-bi-dnt');
                if (dntFlag === undefined)
                {
                    sendClickEvent(e)
                }
                break
            }
        }
    }
    function sendAutoPageView()
    {
        sendPageView()
    }
    function sendPageView(customNameValues)
    {
        var pageViewData = {};
        pageViewData["utcOffset"] = getTimeZoneOffSet();
        pageViewData["referrerUri"] = referrerUri;
        pageViewData["cookieEnabled"] = getCookieEnabled();
        pageViewData["browserSize"] = getBrowserSize();
        pageViewData["screenRes"] = window.screen && screen.width + "x" + screen.height;
        pageViewData["pageUri"] = requestUri;
        pageViewData["cookies"] = getClientCookies();
        pageViewData["content"] = getPageContent();
        pageViewData["flightId"] = ids.getFlights();
        pageViewData["signInStatus"] = signInStatus;
        if (captureAddInsInfo)
        {
            var silverLightInfo = getSilverLightInfo();
            pageViewData["slInstalled"] = silverLightInfo["installed"] || false;
            pageViewData["slEnabled"] = silverLightInfo["enabled"] || false;
            pageViewData["slVersion"] = silverLightInfo["version"] || '';
            var flashInfo = getFlashInfo();
            pageViewData["flashInstalled"] = flashInfo["installed"] || false;
            pageViewData["flashVersion"] = flashInfo["version"] || ''
        }
        var pageTags = {};
        if (window.performance && window.performance.timing)
        {
            if (captureAssetsPerfInfo === true)
            {
                try
                {
                    var performanceData = window.performance.getEntries().filter(function(item)
                        {
                            return item.initiatorType === "script" || item.initiatorType === "link"
                        });
                    pageTags["AssetPerformance"] = JSON.stringify(performanceData)
                }
                catch(ex) {}
            }
            pageTags["timing"] = JSON.stringify(window.performance.timing);
            pageViewData["pageLoadTime"] = window.performance.timing["domComplete"] - window.performance.timing["fetchStart"]
        }
        pageTags["metaTags"] = getMetaData();
        if (customNameValues)
        {
            for (var key in customNameValues)
            {
                pageTags[key] = (customNameValues[key])
            }
        }
        pageViewData["pageTags"] = JSON.stringify(pageTags);
        pageViewData["pageName"] = getPageName();
        vortexEvents.sendPageView(pageViewData)
    }
    function sendPartialView(areaId, loadTime, customNameValues)
    {
        var pageViewData = {};
        pageViewData["referrerUri"] = referrerUri;
        pageViewData["pageUri"] = requestUri;
        pageViewData["content"] = getPageContent(areaId);
        pageViewData["pageLoadTime"] = loadTime;
        pageViewData["pageName"] = getPageName();
        if (customNameValues)
        {
            pageViewData["pageTags"] = JSON.stringify(customNameValues)
        }
        vortexEvents.sendPartialPageView(pageViewData)
    }
    function capturePreLoad()
    {
        var eventData = {};
        eventData["referrerUri"] = referrerUri;
        eventData["pageUri"] = requestUri;
        eventData["pageName"] = getPageName();
        vortexEvents.sendPreLoad(eventData)
    }
    function sendCustomClickEvent(contentDetails, customNameValues)
    {
        sendClickEvent(null, customNameValues, contentDetails)
    }
    function sendElementClickEvent(element, customNameValues)
    {
        sendClickEvent(element, customNameValues, null)
    }
    function sendClickEvent(element, customNameValues, contentDetails)
    {
        var clickEventData = {};
        clickEventData["timeToAction"] = getTimeToClick();
        var customTags = {};
        if (element)
        {
            clickEventData["targetUri"] = getClickTarget(element);
            clickEventData["content"] = getElementContent(element);
            customTags = getCustomTags(element)
        }
        else if (contentDetails)
        {
            clickEventData["targetUri"] = contentDetails.targetUri;
            clickEventData["content"] = getCustomElementContent(contentDetails)
        }
        if (customNameValues)
        {
            customTags = $.extend(customTags, customNameValues)
        }
        clickEventData["pageTags"] = JSON.stringify(customTags);
        clickEventData["pageUri"] = requestUri;
        clickEventData["pageName"] = getPageName();
        clickEventData["flightId"] = ids.getFlights();
        vortexEvents.sendPageAction(clickEventData)
    }
    function getTimeToClick()
    {
        var timestamp = (new Date).getTime();
        if (window.performance && window.performance.timing)
        {
            var domComplete = window.performance.timing.domComplete;
            if (domComplete !== 0)
            {
                return timestamp - domComplete
            }
        }
        return -1
    }
    function getPageContent(areaId)
    {
        var arrayOfContents = [];
        var slotsToCapture;
        if (areaId)
        {
            var area = $("#" + areaId);
            area = (area && area.length === 1) && area[0];
            slotsToCapture = $("[data-bi-slot]", $(area)).inViewport()
        }
        else
        {
            slotsToCapture = $("[data-bi-slot]").inViewport()
        }
        var areaContent;
        for (var j = 0; j < slotsToCapture.length; j++)
        {
            var contentElement = $(slotsToCapture[j]);
            areaContent = getAreaContent(contentElement);
            var elementContent = {
                    areaName: areaContent.areaName, slotNumber: contentElement.attr('data-bi-slot'), templateName: areaContent.templateName, contentId: contentElement.attr('data-bi-id'), contentName: contentElement.attr('data-bi-name') || contentElement.attr('name') || contentElement.attr('alt') || '', contentSource: contentElement.attr('data-bi-source') || areaContent.contentSource, product: contentElement.attr('data-bi-product') || areaContent.product, contentType: contentElement.attr('data-bi-type') || areaContent.type
                };
            arrayOfContents.push(elementContent)
        }
        return getContentBlob(arrayOfContents)
    }
    function getElementContent(element)
    {
        if (!element)
        {
            return ""
        }
        var areaContent = getAreaContent(element);
        var arrayOfContents = [];
        var content = $(element).closest("[data-bi-name]");
        var contentElement = (content && content.length === 1) ? $(content[0]) : $(element);
        var elementContent = {
                areaName: areaContent.areaName, slotNumber: contentElement.attr('data-bi-slot'), templateName: areaContent.templateName, contentId: contentElement.attr('data-bi-id'), contentName: contentElement.attr('data-bi-name') || contentElement.attr('name') || contentElement.attr('alt') || contentElement.attr('value') || contentElement.innerText || '', contentSource: contentElement.attr('data-bi-source') || areaContent.contentSource, product: contentElement.attr('data-bi-product') || areaContent.product, contentType: contentElement.attr('data-bi-type') || areaContent.type
            };
        arrayOfContents.push(elementContent);
        return getContentBlob(arrayOfContents)
    }
    function getAreaContent(element)
    {
        var area = $(element).closest("[data-bi-area]");
        var areaElement = (area && area.length === 1) ? $(area[0]) : $(element);
        return {
                areaName: areaElement.attr('data-bi-area'), templateName: areaElement.attr('data-bi-view'), contentSource: areaElement.attr('data-bi-source'), product: areaElement.attr('data-bi-product'), type: areaElement.attr('data-bi-type')
            }
    }
    function getCustomElementContent(contentDetails)
    {
        var arrayOfContents = [];
        var elementContent = {
                areaName: contentDetails.areaName, slotNumber: contentDetails.slotNumber, templateName: contentDetails.templateName, contentId: contentDetails.contentId, contentName: contentDetails.name, contentSource: contentDetails.contentSource, product: contentDetails.product
            };
        arrayOfContents.push(elementContent);
        return getContentBlob(arrayOfContents)
    }
    function getContentBlob(arrayOfContents)
    {
        return JSON.stringify(arrayOfContents)
    }
    function getClientCookies()
    {
        var cookies = "";
        var configuredCookiesToCollect = ["ANON", "MC1", "MSFPC"];
        var uniqueCookies = {};
        var mergedCookies = configuredCookiesToCollect;
        var key;
        var cookieValue;
        try
        {
            try
            {
                if (window.varCustomerCookies && window.varCustomerCookies.length > 0)
                {
                    mergedCookies = mergedCookies.concat(window.varCustomerCookies)
                }
            }
            catch(e) {}
            for (key in mergedCookies)
            {
                if (!uniqueCookies.hasOwnProperty(mergedCookies[key]))
                {
                    uniqueCookies[mergedCookies[key]] = "";
                    cookieValue = decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(mergedCookies[key]).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1"));
                    if (cookieValue != "")
                    {
                        cookies += mergedCookies[key] + "=" + cookieValue + ";"
                    }
                }
            }
        }
        catch(e) {}
        return cookies
    }
    function getClickTarget(e)
    {
        var clickTarget = "";
        switch (e.tagName)
        {
            case"A":
            case"AREA":
                clickTarget = e.href || '';
                break;
            case"IMG":
                clickTarget = getImageHref(e);
                break;
            case"INPUT":
                var type = e.type;
                if (type && ((type == "button" || type == "reset" || type == "submit" || type == "image" || type == "radio")) || ((type == "text") && ((e.which || e.keyCode) == 13)))
                {
                    if (e.form)
                    {
                        clickTarget = e.form.action || window.location.pathname
                    }
                    else
                    {
                        clickTarget = window.location.pathname
                    }
                }
                break;
            default:
                break
        }
        return clickTarget
    }
    function getTimeZoneOffSet()
    {
        var tz;
        var currDate = new Date;
        tz = currDate.getTimezoneOffset();
        return (tz / (-60))
    }
    function getCustomTags(obj)
    {
        var customParameters = {};
        while (obj)
        {
            if (isPii(obj))
            {
                continue
            }
            for (var attr in obj.attributes)
            {
                if (attr)
                {
                    if (obj.attributes[attr])
                    {
                        var nn = obj.attributes[attr].name;
                        if (nn)
                        {
                            if (nn.toLowerCase().indexOf('ms.') == 0)
                            {
                                customParameters[nn] = obj.attributes[attr].value
                            }
                        }
                    }
                }
            }
            obj = (obj.parentElement || obj.parentNode)
        }
        return customParameters
    }
    function getFlashInfo()
    {
        var flashInfo = {};
        if (navigator.plugins["Shockwave Flash"])
        {
            flashInfo["installed"] = true;
            var plugin = navigator.plugins["Shockwave Flash"];
            flashInfo["version"] = plugin.description.split(" ")[2]
        }
        else if (navigator.userAgent.indexOf('MSIE') != -1)
        {
            var flashMax = (new Date).getFullYear() - 1992;
            for (var i = flashMax; i > 0; i--)
            {
                try
                {
                    var flash = new ActiveXObject("ShockwaveFlash.ShockwaveFlash." + i);
                    flashInfo["installed"] = true;
                    flashInfo["version"] = i + ".0";
                    break
                }
                catch(e) {}
            }
        }
        return flashInfo
    }
    function getSilverLightInfo()
    {
        var silverlightInfo = {};
        if (window.Silverlight != undefined)
        {
            silverlightInfo["enabled"] = true
        }
        try
        {
            if (navigator.plugins["Silverlight Plug-In"])
            {
                var plugin = navigator.plugins["Silverlight Plug-In"];
                silverlightInfo["installed"] = true;
                var actualVer = plugin.description;
                if (actualVer)
                {
                    var temp = actualVer.split(".");
                    actualVer = temp[0] + "." + temp[1];
                    silverlightInfo["version"] = actualVer
                }
            }
            else if (navigator.userAgent.indexOf('MSIE') != -1)
            {
                var silverlightObj = new ActiveXObject('AgControl.AgControl');
                if (silverlightObj)
                {
                    silverlightInfo["installed"] = true;
                    silverlightInfo["version"] = getSilverlightVersion(silverlightObj)
                }
            }
        }
        catch(e) {}
        return silverlightInfo
    }
    function getMetaData()
    {
        var metaElements;
        var metaData = {};
        metaElements = $("meta");
        for (var i = 0; i < metaElements.length; i++)
        {
            var meta = metaElements[i];
            if (meta.name)
            {
                var mt = meta.name.toLowerCase();
                if (mt.indexOf('ms.') == 0)
                {
                    metaData[meta.name] = meta.content
                }
            }
        }
        return metaData
    }
    function getBrowserSize()
    {
        var browserSize = '';
        if (document.body && document.body.clientWidth)
        {
            browserSize = document.body.clientWidth + "x" + document.body.clientHeight
        }
        else if (document.documentElement && document.documentElement.clientWidth)
        {
            browserSize = document.documentElement.clientWidth + "x" + document.documentElement.clientHeight
        }
        else if (window.innerWidth)
        {
            browserSize = window.innerWidth + "x" + window.innerHeight
        }
        return browserSize
    }
    function getCookieEnabled()
    {
        if (navigator.cookieEnabled)
        {
            return navigator.cookieEnabled
        }
        var testCookieName = "MC0";
        var cookiePresent = cookie.getCookie(testCookieName);
        if (!cookiePresent)
        {
            document.cookie = testCookieName + "=" + createGuid();
            cookiePresent = cookie.getCookie(testCookieName)
        }
        return cookiePresent ? true : false
    }
    function getSilverlightVersion(control)
    {
        var slv = '';
        var slVMax = (new Date).getYear() - 2004;
        for (var i = slVMax; i > 0; i--)
        {
            for (var j = 9; j >= 0; j--)
            {
                slv = i + "." + j;
                if (control.IsVersionSupported(slv))
                {
                    return slv
                }
            }
        }
        return slv
    }
    function getImageHref(element)
    {
        var temp = element;
        if (temp)
        {
            var parent = $(temp).closest("A");
            if (parent.length === 1)
            {
                if (parent[0].href)
                {
                    return parent[0].href
                }
                else if (parent[0].src)
                {
                    return (parent[0].src)
                }
            }
        }
        return ''
    }
    function isPii(element)
    {
        if (!element || !element.attributes)
        {
            return false
        }
        var pii = element.getAttribute("data-bi-dnt");
        return (pii && pii.toLowerCase() === "pii") ? true : false
    }
    var supportedMuidHosts = {
            "microsoft.com": "c1.microsoft.com", "xbox.com": "c.xbox.com", "live.com": "c.live.com", "microsoftstore.com": "c.microsoftstore.com", "msn.com": "c.msn.com", "windows.com": "c.windows.com"
        };
    return {
            init: init, capturePageView: sendPageView, capturePartialView: sendPartialView, capturePageAction: sendElementClickEvent, captureContentPageAction: sendCustomClickEvent, disableAutoPageView: function()
                {
                    autoPageView = false
                }, disableAutoClickTracking: function()
                {
                    autoClickEvents = false
                }, disableMuidSync: function()
                {
                    syncMuid = false
                }, disableJavascriptErrorTracker: function()
                {
                    trackJsErrors = false
                }, enableCaptureAddInsInfo: function()
                {
                    captureAddInsInfo = true
                }, enableCaptureAssetsPerfInfo: function()
                {
                    captureAssetsPerfInfo = true
                }, setReferrer: function(uri)
                {
                    if (uri != null)
                    {
                        referrerUri = uri
                    }
                }, setRequestUri: function(uri)
                {
                    if (uri)
                    {
                        requestUri = uri
                    }
                }, setSignInStatus: function(singedIn)
                {
                    singedIn === true ? signInStatus = 1 : signInStatus = 0
                }, setAppId: function(appId)
                {
                    if (appId)
                    {
                        vortexEvents.setAppId(appId)
                    }
                }
        }
})